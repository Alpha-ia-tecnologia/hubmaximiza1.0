{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RonaldoPimentel\\\\Documents\\\\hub-maximiza-atualizado\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Verificar se existe um usuário salvo no localStorage\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Simulação de login - em produção, fazer chamada para API\n      // Por enquanto, vamos usar dados mockados\n      let userData = null;\n      if (email === 'admin@maximiza.com.br' && password === 'admin123') {\n        userData = {\n          id: 1,\n          name: 'Administrador',\n          email: 'admin@maximiza.com.br',\n          role: 'admin',\n          municipality: null\n        };\n      } else if (email === 'usuario@maximiza.com.br' && password === 'user123') {\n        userData = {\n          id: 2,\n          name: 'João Silva',\n          email: 'usuario@maximiza.com.br',\n          role: 'user',\n          municipality: 'São José de Ribamar',\n          solutions: [{\n            id: 1,\n            name: 'SALF',\n            enabled: true\n          }, {\n            id: 2,\n            name: 'SAG',\n            enabled: true\n          }]\n        };\n      } else {\n        throw new Error('Email ou senha inválidos');\n      }\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n      toast.success('Login realizado com sucesso!');\n      return userData;\n    } catch (error) {\n      toast.error(error.message || 'Erro ao fazer login');\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n    toast.info('Logout realizado com sucesso');\n  };\n  const updatePassword = async (currentPassword, newPassword) => {\n    try {\n      // Simulação de atualização de senha\n      // Em produção, fazer chamada para API\n      toast.success('Senha atualizada com sucesso!');\n      return true;\n    } catch (error) {\n      toast.error('Erro ao atualizar senha');\n      throw error;\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      // Simulação de reset de senha\n      // Em produção, fazer chamada para API\n      toast.success(`Email de recuperação enviado para ${email}`);\n      return true;\n    } catch (error) {\n      toast.error('Erro ao enviar email de recuperação');\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    updatePassword,\n    resetPassword,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","email","password","userData","id","name","role","municipality","solutions","enabled","setItem","stringify","success","error","message","logout","removeItem","info","updatePassword","currentPassword","newPassword","resetPassword","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/RonaldoPimentel/Documents/hub-maximiza-atualizado/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Verificar se existe um usuário salvo no localStorage\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Simulação de login - em produção, fazer chamada para API\r\n      // Por enquanto, vamos usar dados mockados\r\n      let userData = null;\r\n      \r\n      if (email === 'admin@maximiza.com.br' && password === 'admin123') {\r\n        userData = {\r\n          id: 1,\r\n          name: 'Administrador',\r\n          email: 'admin@maximiza.com.br',\r\n          role: 'admin',\r\n          municipality: null\r\n        };\r\n      } else if (email === 'usuario@maximiza.com.br' && password === 'user123') {\r\n        userData = {\r\n          id: 2,\r\n          name: 'João Silva',\r\n          email: 'usuario@maximiza.com.br',\r\n          role: 'user',\r\n          municipality: 'São José de Ribamar',\r\n          solutions: [\r\n            { id: 1, name: 'SALF', enabled: true },\r\n            { id: 2, name: 'SAG', enabled: true }\r\n          ]\r\n        };\r\n      } else {\r\n        throw new Error('Email ou senha inválidos');\r\n      }\r\n\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      setUser(userData);\r\n      toast.success('Login realizado com sucesso!');\r\n      return userData;\r\n    } catch (error) {\r\n      toast.error(error.message || 'Erro ao fazer login');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    toast.info('Logout realizado com sucesso');\r\n  };\r\n\r\n  const updatePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      // Simulação de atualização de senha\r\n      // Em produção, fazer chamada para API\r\n      toast.success('Senha atualizada com sucesso!');\r\n      return true;\r\n    } catch (error) {\r\n      toast.error('Erro ao atualizar senha');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (email) => {\r\n    try {\r\n      // Simulação de reset de senha\r\n      // Em produção, fazer chamada para API\r\n      toast.success(`Email de recuperação enviado para ${email}`);\r\n      return true;\r\n    } catch (error) {\r\n      toast.error('Erro ao enviar email de recuperação');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    updatePassword,\r\n    resetPassword,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}