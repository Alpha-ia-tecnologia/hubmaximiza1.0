{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RonaldoPimentel\\\\Documents\\\\hub-maximiza-atualizado\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Configurar base URL da API\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Configurar axios\naxios.defaults.baseURL = API_BASE_URL;\n\n// Interceptor para adicionar token automaticamente\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para tratar erros de autenticação\naxios.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const response = await axios.get('/auth/me');\n          setUser(response.data.user);\n        }\n      } catch (error) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Simulação de login - em produção, fazer chamada para API\n      // Por enquanto, vamos usar dados mockados\n      let userData = null;\n      if (email === 'admin@maximiza.com.br' && password === 'admin123') {\n        userData = {\n          id: 1,\n          name: 'Administrador',\n          email: 'admin@maximiza.com.br',\n          role: 'admin',\n          municipality: null\n        };\n      } else if (email === 'usuario@maximiza.com.br' && password === 'user123') {\n        userData = {\n          id: 2,\n          name: 'João Silva',\n          email: 'usuario@maximiza.com.br',\n          role: 'user',\n          municipality: 'São José de Ribamar',\n          solutions: [{\n            id: 1,\n            name: 'SALF',\n            enabled: true\n          }, {\n            id: 2,\n            name: 'SAG',\n            enabled: true\n          }]\n        };\n      } else {\n        throw new Error('Email ou senha inválidos');\n      }\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n      toast.success('Login realizado com sucesso!');\n      return userData;\n    } catch (error) {\n      toast.error(error.message || 'Erro ao fazer login');\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n    toast.info('Logout realizado com sucesso');\n  };\n  const updatePassword = async (currentPassword, newPassword) => {\n    try {\n      // Simulação de atualização de senha\n      // Em produção, fazer chamada para API\n      toast.success('Senha atualizada com sucesso!');\n      return true;\n    } catch (error) {\n      toast.error('Erro ao atualizar senha');\n      throw error;\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      // Simulação de reset de senha\n      // Em produção, fazer chamada para API\n      toast.success(`Email de recuperação enviado para ${email}`);\n      return true;\n    } catch (error) {\n      toast.error('Erro ao enviar email de recuperação');\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    updatePassword,\n    resetPassword,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","toast","axios","jsxDEV","_jsxDEV","AuthContext","API_BASE_URL","defaults","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuth","get","data","login","email","password","userData","id","name","role","municipality","solutions","enabled","setItem","JSON","stringify","success","message","logout","info","updatePassword","currentPassword","newPassword","resetPassword","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/RonaldoPimentel/Documents/hub-maximiza-atualizado/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\n// Configurar base URL da API\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Configurar axios\r\naxios.defaults.baseURL = API_BASE_URL;\r\n\r\n// Interceptor para adicionar token automaticamente\r\naxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Interceptor para tratar erros de autenticação\r\naxios.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          const response = await axios.get('/auth/me');\r\n          setUser(response.data.user);\r\n        }\r\n      } catch (error) {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Simulação de login - em produção, fazer chamada para API\r\n      // Por enquanto, vamos usar dados mockados\r\n      let userData = null;\r\n      \r\n      if (email === 'admin@maximiza.com.br' && password === 'admin123') {\r\n        userData = {\r\n          id: 1,\r\n          name: 'Administrador',\r\n          email: 'admin@maximiza.com.br',\r\n          role: 'admin',\r\n          municipality: null\r\n        };\r\n      } else if (email === 'usuario@maximiza.com.br' && password === 'user123') {\r\n        userData = {\r\n          id: 2,\r\n          name: 'João Silva',\r\n          email: 'usuario@maximiza.com.br',\r\n          role: 'user',\r\n          municipality: 'São José de Ribamar',\r\n          solutions: [\r\n            { id: 1, name: 'SALF', enabled: true },\r\n            { id: 2, name: 'SAG', enabled: true }\r\n          ]\r\n        };\r\n      } else {\r\n        throw new Error('Email ou senha inválidos');\r\n      }\r\n\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      setUser(userData);\r\n      toast.success('Login realizado com sucesso!');\r\n      return userData;\r\n    } catch (error) {\r\n      toast.error(error.message || 'Erro ao fazer login');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    toast.info('Logout realizado com sucesso');\r\n  };\r\n\r\n  const updatePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      // Simulação de atualização de senha\r\n      // Em produção, fazer chamada para API\r\n      toast.success('Senha atualizada com sucesso!');\r\n      return true;\r\n    } catch (error) {\r\n      toast.error('Erro ao atualizar senha');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (email) => {\r\n    try {\r\n      // Simulação de reset de senha\r\n      // Em produção, fazer chamada para API\r\n      toast.success(`Email de recuperação enviado para ${email}`);\r\n      return true;\r\n    } catch (error) {\r\n      toast.error('Erro ao enviar email de recuperação');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    updatePassword,\r\n    resetPassword,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}