{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RonaldoPimentel\\\\Documents\\\\hub-maximiza-atualizado\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport api, { testConnection } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const response = await axios.get('/auth/me');\n          setUser(response.data.user);\n        }\n      } catch (error) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user: userData\n      } = response.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n      toast.success('Login realizado com sucesso!');\n      return userData;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Erro ao fazer login';\n      toast.error(message);\n      throw new Error(message);\n    }\n  };\n  const logout = async () => {\n    try {\n      await axios.post('/auth/logout');\n    } catch (error) {\n      // Ignorar erros de logout\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      setUser(null);\n      toast.info('Logout realizado com sucesso');\n    }\n  };\n  const updatePassword = async (currentPassword, newPassword) => {\n    try {\n      // Simulação de atualização de senha\n      // Em produção, fazer chamada para API\n      toast.success('Senha atualizada com sucesso!');\n      return true;\n    } catch (error) {\n      toast.error('Erro ao atualizar senha');\n      throw error;\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      // Simulação de reset de senha\n      // Em produção, fazer chamada para API\n      toast.success(`Email de recuperação enviado para ${email}`);\n      return true;\n    } catch (error) {\n      toast.error('Erro ao enviar email de recuperação');\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    updatePassword,\n    resetPassword,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","toast","api","testConnection","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","response","axios","get","data","error","removeItem","login","email","password","post","userData","setItem","JSON","stringify","success","_error$response","_error$response$data","message","logout","info","updatePassword","currentPassword","newPassword","resetPassword","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/RonaldoPimentel/Documents/hub-maximiza-atualizado/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport api, { testConnection } from '../utils/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          const response = await axios.get('/auth/me');\r\n          setUser(response.data.user);\r\n        }\r\n      } catch (error) {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post('/auth/login', {\r\n        email,\r\n        password\r\n      });\r\n\r\n      const { token, user: userData } = response.data;\r\n      \r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      setUser(userData);\r\n      \r\n      toast.success('Login realizado com sucesso!');\r\n      return userData;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Erro ao fazer login';\r\n      toast.error(message);\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await axios.post('/auth/logout');\r\n    } catch (error) {\r\n      // Ignorar erros de logout\r\n    } finally {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      setUser(null);\r\n      toast.info('Logout realizado com sucesso');\r\n    }\r\n  };\r\n\r\n  const updatePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      // Simulação de atualização de senha\r\n      // Em produção, fazer chamada para API\r\n      toast.success('Senha atualizada com sucesso!');\r\n      return true;\r\n    } catch (error) {\r\n      toast.error('Erro ao atualizar senha');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (email) => {\r\n    try {\r\n      // Simulação de reset de senha\r\n      // Em produção, fazer chamada para API\r\n      toast.success(`Email de recuperação enviado para ${email}`);\r\n      return true;\r\n    } catch (error) {\r\n      toast.error('Erro ao enviar email de recuperação');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    updatePassword,\r\n    resetPassword,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}